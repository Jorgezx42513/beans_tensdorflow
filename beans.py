# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Dv_t5tihioburyFy0oEzUh-bEkPOZRw
"""

import tensorflow as tf 
import numpy as np 
import matplotlib.pyplot as plt 
import tensorflow_datasets as tfds
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

image = tf.image.resize

train_images , train_labels  = tfds.as_numpy(tfds.load(
    "beans",
    split="train",
    batch_size=-1,
    as_supervised=True
))

train_images = train_images / 255.0

def get_model(input_shape):
  model = Sequential([
     Conv2D(12,(3),padding="same",activation="relu",input_shape=input_shape),
     MaxPool2D(5),
     Conv2D(8,(3),padding="same",activation="relu",input_shape=input_shape),
     MaxPool2D(3),
     Flatten(),
     Dense(128,activation="relu"),
     Dense(64,activation="relu"),
     Dense(32,activation="relu"),
     Dense(10,activation="softmax")
  ])
  model.compile(
      optimizer="adam",
      loss="sparse_categorical_crossentropy",
      metrics=["accuracy"]
  )
  return model

model = get_model(train_images[0].shape)
model.summary()

checkpoint_path = "./checkpoint"

ckpt = ModelCheckpoint(checkpoint_path,monitor="val_accuracy",save_best_only=True,save_weights_only=True)

early_stopping = EarlyStopping(monitor="val_accuracy",min_delta=0.01,patience=5)

history = model.fit(train_images,train_labels,epochs=20,validation_split=0.01,callbacks=(ckpt,early_stopping))

labels = [
          'angular_leaf_spot',
    'bean_rust',
    'healthy'
]

random_inx = np.random.choice(train_images.shape[0])
test_image = train_images[random_inx]
plt.imshow(train_images)
plt.show()
print(f"Label: {labels[train_labels[random_inx]]}")
predictions = model.predict(train_image[np.newaxis,...])
print(f"Prediction: {labels[np.argmax(predictions)]}")